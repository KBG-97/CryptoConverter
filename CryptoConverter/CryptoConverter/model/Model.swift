
/*не работает этот апи и взял данные второй проекта
 https://api.nomics.com/v1/currencies/ticker?key=3c8c0907276523d0ff0e94c50657de0c&format=json&interval=1d&convert=USD*/
import Foundation

let headers = [ "x-rapidapi-host": "apidojo-yahoo-finance-v1.p.rapidapi.com", "x-rapidapi-key": "abb2e82b19msh15218e07420f12ep1350e1jsnb11a4ef75a28"]

let request = NSMutableURLRequest(url: NSURL(string: "https://apidojo-yahoo-finance-v1.p.rapidapi.com/market/get-quotes?region=US&lang=en&symbols=ATVI%252CADBE%252CAMD%252CALXN%252CALGN%252CGOOG%252CGOOGL%252CAMZN%252CAMGN%252CADI%252CANSS%252CAAPL%252CAMAT%252CASML%252CADSK%252CADP%252CBIDU%252CBIIB%252CBMRN%252CBKNG%252CAVGO%252CCDNS%252CCDW%252CCERN%252CCHTR%252CCHKP%252CCTAS%252CCSCO%252CCTXS%252CCTSH%252CCMCSA%252CCPRT%252CCSGP%252CCOST%252CCSX%252CDXCM%252CDLTR%252CEBAY%252CEA%252CEXC%252CEXPE%252CFB%252CFAST%252CFISV%252CFOX%252CFOXA%252CGILD%252CIDXX%252CILMN%252CINCY%252CINTC%252CINTU%252CISRG%252CJD%252CKLAC%252CLRCX%252CLBTYA%252CLBTYK%252CLULU%252CMAR%252CMXIM%252CMELI%252CMCHP%252CMU%252CMSFT%252CMDLZ%252CMNST%252CNTAP%252CNTES%252CNFLX%252CNVDA%252CNXPI%252CORLY%252CPCAR%252CPAYX%252CPYPL%252CPEP%252CQCOM%252CREGN%252CROST%252CSGEN%252CSIRI%252CSWKS%252CSPLK%252CSBUX%252CSNPS%252CTMUS%252CTTWO%252CTSLA%252CTXN%252CKHC%252CTCOM%252CULTA%252CUAL%252CVRSN%252CVRSK%252CVRTX%252CWBA%252CWDC%252CWDAY%252CXEL%252CXLNX%252CZM%252CF%252CGE%252CAAL%252CDIS%252CDAL%252CCCL%252CGPRO%252CACB%252CNCLH%252CFIT%252CBA%252CBAC%252CPLUG%252CSNAP%252CCGC%252CRCL%252CINO%252CUBER%252CHEXO%252CSAVE%252CCRON%252CTWTR%252CGRPN%252CBABA%252CZNGA%252CMRO%252CMRNA%252CLUV%252CMGM%252CAPHA%252CT%252CKO%252CJBLU%252CUSO%252CMFA%252CXOM%252CUCO%252CNIO%252CGNUS%252COGI%252CLK%252CGM%252CSPCE%252CGUSH%252CAMC%252CNRZ%252CNOK%252CIVR%252CPENN%252CVOO%252CTLRY%252CWORK%252CDKNG%252CVSLR%252CCPRX%252CCPE%252CSPY%252CLYFT%252CPLAY%252CHTZ%252CV%252CHAL%252CNKE%252CPFE%252CSQ%252CKOS%252CWFC%252CERI%252CBYND%252COXY%252CJPM%252CSPHD%252CET%252CNYMT%252CTXMD%252CCRBP%252CSRNE%252CBP%252CSNE%252CVKTX%252COAS%252CWMT%252CNTDOY%252CFCEL%252CPTON%252CDKNGW%252CVTIQW%252CNKLAW%252CPRTS%252CHEBT%252CDRD%252CKRMD%252CMHH%252CTRIL%252CELA%252CVTIQU%252CSPWH%252CATLC%252CRVP%252CIMVTW%252COSTK%252CPDD%252CPLMR%252CAPLT%252CCDLX%252CLEU%252CCUE%252CCGEN%252CARCT%252CSAVA%252CLPTX%252CNKLA%252CVTIQ%252CBLDP%252CMLSS%252CSE%252CDOCU%252CNERV%252CRLMD%252CSILV%252CGSX%252CAUY%252CBTAI%252CAPTO%252CACMR%252CTDOC%252CBCLI%252CEQX%252CPRPL%252CFRTA%252CSBSW%252CKALA%252CVRML%252CPW%252CQDEL%252CSEDG%252CASPU%252CPAAS%252CARYAW%252CRPAY%252CNYMX%252CCELH%252CFSM%252CEVOK%252CCYBE%252CHL%252CCMCL%252CIGMS%252CBILI%252CAQST%252CVICR%252CINFU%252CATOM%252CENPH%252CCRNC%252CCCXI%252CHOV%252CXPEL%252CZYXI%252CREGI%252CEVER%252CIMVT%252CRH%252CZEAL%252CPNTG%252CZLAB%252CSNGX%252CCALX%252CFENC%252CBVXV%252CFVRR%252CBNTX%252CWSTG%252CBTG%252CKGC%252CRVNC%252CDRRX%252CUTI%252CADS.DE")! as URL, cachePolicy: .useProtocolCachePolicy, timeoutInterval: 10.0)

func fetchQuotes(quoteCompletionHandler: @escaping ([Result]?, Error?) -> Void) {
    request.httpMethod = "GET"
    request.allHTTPHeaderFields = headers

    let session = URLSession.shared
    let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { data, response, error in
        if (error != nil) {
            print(error!)
            return
        }
        do {
            let jsonData = try JSONSerialization.jsonObject(with: data!, options: [])
            if let dict = jsonData as? NSDictionary{
                if let info = dict["quoteResponse"] as? NSDictionary{
                    quoteCompletionHandler(QuoteResponse(dictionary: info).result, nil)
//                    self.someVar = QuoteResponse(dictionary: info)
                }
            }
        }catch let parseError{
            print("error")
            quoteCompletionHandler(nil, parseError)
        }
    })
    dataTask.resume()
}

